import logging

from abc import ABC, abstractmethod

from .utils import protocol_version_conversion
from ..scan_parameters.connections.connection_utils import worst_or_best_protocol


class VulnerabilityTest(ABC):
    test_name = ''

    def __init__(self, supported_protocols, address):
        self.timeout = 2
        self.address = address
        self.valid_protocols = []
        self.supported_protocols = supported_protocols

    def scan(self):
        """
        Test the webserver for a vulnerability on all valid protocol versions

        :return: Whether any test was positive
        :rtype: bool
        """
        logging.info(f'Testing for {self.test_name}...')
        to_test_protocols = list(filter(lambda protocol: protocol in self.valid_protocols, self.supported_protocols))
        if len(to_test_protocols) == 0:
            return False
        protocol_to_test = protocol_version_conversion(worst_or_best_protocol(to_test_protocols, False), True)
        output = self.test(protocol_to_test)
        logging.info(f'{self.test_name} test done.')
        return output

    @abstractmethod
    def test(self, version):
        """
        Test the implemented vulnerability

        :param int version: SSL/TLS version to test on
        :return: Whether the test passed or not
        :rtype: bool
        """
        pass
